import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

SHIFT_TIME = 50
INIT_BATCH_SIZE = 200
BATCH_SIZE = 10
TOT_SIZE = 400

PRE_NONZERO_COEFS = [2,1,1,1]
POST_NONZERO_COEFS = [-2,-1,-1,-1]
NUM_NONZERO_COEFS = len(PRE_NONZERO_COEFS)
NUM_ZERO_VARS = 4
NUM_FEATURES = NUM_NONZERO_COEFS + NUM_ZERO_VARS
PRE_BETA = ",".join(list(map(str, PRE_NONZERO_COEFS + (NUM_ZERO_VARS + 1) * [0])))
SHIFT_BETA =  ",".join(list(map(str, POST_NONZERO_COEFS + (NUM_ZERO_VARS + 1) * [0])))

ALARM_RATE = 0.1
NUM_REPS = 40

nest.add(
    'family',
    ["bernoulli"])

nest.add(
    'model_type',
    [
        "logistic",
    ])

nest.add(
    'n_train',
    [200],
    label_func=lambda c: "ntrain_%d" % c)

nest.add(
    'shift_factor',
    [
        0.8,
        0.5,
    ],
    label_func=lambda c: "shift_factor_%.2f" % c)

nest.add(
    'shift_time',
    [
        SHIFT_TIME,
    ],
    label_func=lambda c: "shift_time_%d" % c)

nest.add(
    'propensity_beta',
    [
        "2,0",
    ],
    label_func=lambda c: "prop_beta_%s" % c)

@nest.add_target_with_env(localenv)
def generate_clinician(env, outdir, c):
    targets = [
            join(outdir, 'clinician.pkl'),
    ]
    cmd = [
        'python generate_clinician.py',
        '--shift-scale',
        'logit',
        '--pre-propensity-beta=%s' % c["propensity_beta"],
	    '--out ${TARGETS[0]}',
    ]

    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add_aggregate('agg_res_overlay', list)
nest.add_aggregate('plot_dict', dict)
# nest.add_aggregate('agg_res_bayes_overlay', list)
nest.add(
    'retrain',
    [
        False,
        True,
    ],
    label_func=lambda c: "retrain_%d" % c)

@nest.add_target_with_env(localenv)
def generate_init_mdl(env, outdir, c):
    cmd = [
        'python generate_init_mdl.py',
        '--seed',
        0,
        '--family',
        c['family'],
        '--model-type',
        c['model_type'],
        '--max-features',
        NUM_FEATURES,
        '--pre-beta',
        PRE_BETA,
        '--refit-freq 1' if c['retrain'] else '',
        '--max-train',
        '0,200,400',
        '--n-train',
        c['n_train'],
	    '--out ${TARGETS[0]}',
	    '--log ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'init_mdl.pkl'),
            join(outdir, 'init_mdl_log.txt')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def generate_data_gen(env, outdir, c):
    targets = [
            join(outdir, 'hospital.pkl'),
    ]
    c['plot_dict']['data_gen'] = targets[0]
    shift_beta = [
        c['shift_factor'] * float(param) for param in SHIFT_BETA.split(",")]
    shift_beta_str = ",".join(map(str, shift_beta))
    cmd = [
        'python generate_data_generator.py',
        '--pre-beta',
        PRE_BETA,
        '--shift-scale',
        "logit",
        '--shift-beta=%s' % shift_beta_str,
        '--shift-time',
        c['shift_time'],
	    '--model-dev ${SOURCES[0]}',
	    '--clinician ${SOURCES[1]}',
	    '--out ${TARGETS[0]}',
    ]

    return env.Command(
        targets,
        [
            c['generate_init_mdl'][0],
            c['generate_clinician'][0],
        ],
        ' '.join(map(str, cmd)))

nest.add_aggregate('agg_res_score', list)
nest.add_aggregate('agg_res_bayes', list)
nest.add_aggregate('agg_res_ipw', list)
nest.add(
    'seed',
    range(NUM_REPS),
    label_func=lambda c: "seed_%d" % c)

@nest.add_target_with_env(localenv)
def do_monitor_score(env, outdir, c):
    cmd = [
        'python run_script.py',
        localenv['cluster'],
        '${TARGETS[0]}',
        'do_score_monitor.py',
        '--seed',
        123 + c['seed'],
        '--n-calib',
        INIT_BATCH_SIZE,
        '--batch-size',
        BATCH_SIZE,
        '--shift-scale',
        'logit',
        '--norm',
        'L1',
        '--max-time',
        TOT_SIZE,
        '--particle',
        10,
        '--confounder-start',
        0,
        '--confounder-end',
        0,
        '--no-halt' if (c['seed'] == 0 and c['retrain']) else '',
        '--alarm-rate',
        ALARM_RATE,
        '--data-gen ${SOURCES[0]}',
        '--out-chart ${TARGETS[0]}',
        '--out-mdls ${TARGETS[1]}',
        '--log ${TARGETS[2]}',
    ]
    targets = [
            join(outdir, 'res_score.csv'),
            join(outdir, 'mdls.pkl'),
            join(outdir, 'log_score.txt'),
        ]
    c['agg_res_score'].append(targets[0])
    if c['retrain'] and c['seed'] == 0:
        c['plot_dict']['mdls'] = targets[1]
    return env.Command(
        targets,
        [
            c['generate_data_gen'][0],
        ],
        ' '.join(map(str, cmd)))

# @nest.add_target_with_env(localenv)
# def plot_risk_v_pred(env, outdir, c):
#     if c['seed'] >= 1:
#         return

#     cmd = [
#         'python plot_risk_v_pred.py',
#         '--scale',
#         'risk',
#         '--data-gen ${SOURCES[0]}',
#         '--mdls ${SOURCES[1]}',
#         '--plot ${TARGETS[0]}',
#     ]
#     targets = [
#             join(outdir, 'calibration.png'),
#         ]
#     return env.Command(
#         targets,
#         [
#             c['generate_data_gen'][0],
#             c['do_monitor_score'][1],
#         ],
#         ' '.join(map(str, cmd)))

# @nest.add_target_with_env(localenv)
# def plot_chart_score(env, outdir, c):
#     if c['seed'] >= 1:
#         return

#     cmd = [
#         'python run_script.py',
#         localenv['cluster'],
#         '${TARGETS[0]}',
#         'plot_chart.py',
#     	'--result ${SOURCES[0]}',
#     	'--chart-stat ${TARGETS[0]}',
#         '--shift-time',
#         c['shift_time'],
#         ]
#     targets = [
#             join(outdir, 'chart_stat_score.png'),
#         ]
#     return env.Command(
#         targets,
#         [
#             c['do_monitor_score'][0],
#         ],
#         ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def do_monitor_bayes(env, outdir, c):
    cmd = [
        'python run_script.py',
        localenv['cluster'],
        '${TARGETS[0]}',
        'do_bayesian_monitor.py',
        '--seed',
        123 + c['seed'],
        '--n-calib',
        INIT_BATCH_SIZE,
        '--batch-size',
        1,
        '--max-time',
        TOT_SIZE,
        '--confounder-start',
        0,
        '--confounder-end',
        0,
        '--num-integrate-samples',
        3000,
        '--prior-shift-factor',
        c['shift_factor'],
        '--alarm-rate',
        ALARM_RATE,
        '--data-gen ${SOURCES[0]}',
        '--temp-file',
        join("simulation_power_magnitude", outdir, 'tmp.json'),
        '--out-chart ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
    ]
    targets = [
            join(outdir, 'res_bayes_sr50.csv'),
            join(outdir, 'log_bayes_sr50.txt'),
        ]
    c['agg_res_bayes'].append(targets[0])
    return env.Command(
        targets,
        [
            c['generate_data_gen'][0],
        ],
        ' '.join(map(str, cmd)))

# @nest.add_target_with_env(localenv)
# def plot_chart(env, outdir, c):
#     if c['seed'] >= 1:
#         return

#     cmd = [
#         'python run_script.py',
#         localenv['cluster'],
#         '${TARGETS[0]}',
#         'plot_chart.py',
#     	'--result ${SOURCES[0]}',
#     	'--chart-stat ${TARGETS[0]}',
#         '--shift-time',
#         c['shift_time'],
#         ]
#     targets = [
#             join(outdir, 'chart_stat_bayes.png'),
#         ]
#     return env.Command(
#         targets,
#         [
#             c['do_monitor_bayes'][0],
#         ],
#         ' '.join(map(str, cmd)))
@nest.add_target_with_env(localenv)
def do_monitor_ipw(env, outdir, c):
    cmd = [
        'python run_script.py',
        localenv['cluster'],
        '${TARGETS[0]}',
        'do_cusum_ipw_monitor.py',
        '--seed',
        123 + c['seed'],
        '--n-calib',
        INIT_BATCH_SIZE,
        '--batch-size',
        BATCH_SIZE,
        '--max-time',
        TOT_SIZE,
        '--particle',
        10,
        '--confounder-start',
        0,
        '--confounder-end',
        0,
        '--no-halt' if (c['seed'] == 0 and c['retrain']) else '',
        '--alarm-rate',
        ALARM_RATE,
        '--data-gen ${SOURCES[0]}',
        '--out-chart ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
    ]
    targets = [
            join(outdir, 'res_ipw.csv'),
            join(outdir, 'log_ipw.txt'),
        ]
    c['agg_res_ipw'].append(targets[0])
    return env.Command(
        targets,
        [
            c['generate_data_gen'][0],
        ],
        ' '.join(map(str, cmd)))


nest.pop("seed")

@nest.add_target_with_env(localenv)
def plot_score(env, outdir, c):
    if NUM_REPS <= 1:
        return
    res = '+'.join([join('simulation_power_magnitude', a) for a in c['agg_res_score']])
    cmd = [
        'python plot_simulation_shift.py',
        '--result-files',
        res,
        '--alarm-rate',
        ALARM_RATE,
        '--monitor-time',
        TOT_SIZE,
        '--csv ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
	    '--plot ${TARGETS[2]}',
        '--shift-time',
        c['shift_time'],
        ]
    targets = [
            join(outdir, 'alert_times.csv'),
            join(outdir, 'log_agg_score.txt'),
            join(outdir, 'plot_alarms_score.png'),
        ]
    retrain_str = 'Retrain' if c['retrain'] else 'Locked'
    c['agg_res_overlay'].append({
        "label": f"scoreCUSUM_{retrain_str}",
        "target": targets[0]})
    return env.Command(
        targets,
        c['agg_res_score'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_bayes(env, outdir, c):
    if len(c['agg_res_bayes']) == 0:
        return
    res = '+'.join([join('simulation_power_magnitude', a) for a in c['agg_res_bayes']])
    cmd = [
        'python plot_simulation_shift.py',
        '--result-files',
        res,
        '--alarm-rate',
        ALARM_RATE,
        '--monitor-time',
        TOT_SIZE,
        '--csv ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
	    '--plot ${TARGETS[2]}',
        '--shift-time',
        c['shift_time'],
        ]
    targets = [
        join(outdir, 'alert_times_bayes.csv'),
        join(outdir, 'log_agg_bayes.txt'),
        join(outdir, 'plot_alarms_bayes.png'),
    ]
    retrain_str = 'Retrain' if c['retrain'] else 'Locked'
    c['agg_res_overlay'].append({
        "label": f"Bayes_{retrain_str}",
        "target": targets[0]})
    return env.Command(
        targets,
        c['agg_res_bayes'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_ipw(env, outdir, c):
    if len(c['agg_res_ipw']) == 0:
        return
    res = '+'.join([join('simulation_power_magnitude', a) for a in c['agg_res_ipw']])
    cmd = [
        'python plot_simulation_shift.py',
        '--result-files',
        res,
        '--alarm-rate',
        ALARM_RATE,
        '--monitor-time',
        TOT_SIZE,
        '--csv ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
	    '--plot ${TARGETS[2]}',
        '--shift-time',
        c['shift_time'],
        ]
    targets = [
        join(outdir, 'alert_times_ipw.csv'),
        join(outdir, 'log_agg_ipw.txt'),
        join(outdir, 'plot_alarms_ipw.png'),
    ]
    retrain_str = 'Retrain' if c['retrain'] else 'Locked'
    c['agg_res_overlay'].append({
        "label": f"ipw_{retrain_str}",
        "target": targets[0]})
    return env.Command(
        targets,
        c['agg_res_ipw'],
        ' '.join(map(str, cmd)))

nest.pop("retrain")

@nest.add_target_with_env(localenv)
def plot_overlay(env, outdir, c):
    if len(c['agg_res_overlay']) == 0:
        return
    res = '+'.join([join('simulation_power_magnitude', a['target']) for a in c['agg_res_overlay']])
    labels = ",".join([a['label'] for a in c['agg_res_overlay']])
    cmd = [
        'python plot_simulation_shift_magnitude.py',
        '--aggregate-files',
        res,
        '--title',
        '"Big shift"' if c['shift_factor'] == 0.8 else '"Small shift"',
        '--labels',
        labels,
        '--alarm-rate',
        ALARM_RATE,
        '--monitor-time',
        ",".join([str(TOT_SIZE)] * len(c['agg_res_overlay'])),
        '--log ${TARGETS[0]}',
	    '--plot ${TARGETS[1]}',
        '--shift-time',
        SHIFT_TIME,
        ]

    return env.Command(
        [
            join(outdir, 'log_agg_overlay.txt'),
            join(outdir, 'plot_alarms_overlay.png'),
        ],
        [a['target'] for a in c['agg_res_overlay']],
        ' '.join(map(str, cmd)))
